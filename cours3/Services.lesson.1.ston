SaLesson{#order:1,#units:OrderedCollection[SaMarkdownContent{#order:0,#title:'Objectives',#id:#___Objectives,#content:'#Objectifs \n\nCette lesson de notre cours cible se familiariser avec le contexte ROS. \nAprès cette lesson vous devez être capable de:\n\t\n\t\n- Reconnaitre qu\'est-ce que ce un Service\n- Pouvoir reconnaitre les services d\'un systeme ROS. \n- Interagir et obtenir information d\'un service existante\n- Comprendre qu\'est-ce que ce un requeter un service. \n- Pouvoir requeter un service depui Ros PY.\n'},SaMultipleChoiceQuestion{#order:1,#title:'Quiz #1: ROS Service',#id:#WhatIsService,#state:{'Un requete d\'action immediate':false,'Une activité d\'intérêt robotique, assurée par un node':false,'Canal de communication':true},#optional:false,#question:'Qu\'est-ce que ce un service?',#choices:['Un sujet de conversation','Canal de communication','Un requete d\'action immediate','Une activité d\'intérêt robotique, assurée par un node'],#singleReponse:false},SaMarkdownContent{#order:2,#title:'Services',#id:#ServicesROS,#content:'##Qu\'est-ce que ce?\nLa communication sur service est une communication synchrone bidirectionnelle entre le client de service qui demande un service et le serveur de service qui répond à la demande. \n\n\n## Une communication bidirectionelle\n\n\nLes méthodes de "publication" et de "souscription" du sujet mentionnées dans des cours precedents sont des méthodes asynchrones qui sont avantageuses pour la transmission périodique de données. D\'un autre côté, il existe un besoin de communication synchrone qui utilise la demande et la réponse. En conséquence, ROS fournit une méthode de communication de messages synchronisés appelée "service".\nUn service se compose d\'un serveur de service qui ne répond que lorsqu\'il y a une demande et d\'un client de service qui peut envoyer des demandes et recevoir des réponses. Contrairement au sujet, le service est une communication de message à temps unique. Par conséquent, lorsque la demande et la réponse du service sont terminées, la connexion entre deux nœuds sera déconnectée. Un service est souvent utilisé pour commander à un robot d\'effectuer une action spécifique ou à des nœuds d\'effectuer certains événements avec une condition spécifique. Le service ne maintient pas la connexion, il est donc utile de réduire la charge du réseau en remplaçant le sujet. Par exemple, si le client demande au serveur l\'heure actuelle le serveur vérifie l\'heure et répond au client, et la connexion est terminée.\n\n\n\n'},SaQuestionaire{#order:3,#title:'Quiz #2: Services',#id:#ServiceQuiz,#optional:false,#questions:OrderedCollection[SaMultipleChoiceQuestion{#id:#ServicesQ2,#state:{'synchrone':true},#optional:false,#question:'Un service est un moyen de communication',#choices:['asynchrone','synchrone'],#singleReponse:true},SaOpenQuestion{#id:#ServicesQ3,#state:'Synchrone => on peut appeler et répondre en même temps\rAsynchrone => chacun doit attendre que l\'autre est fini de parler avant de pouvoir parler',#optional:false,#question:'Comparez brefment la difference entre synchrone et asynchrone'},SaMultipleChoiceQuestion{#id:#ServicesQ1,#state:{'bidirectionel':true},#optional:false,#question:'Un service est un moyen de communication',#choices:['unidirectionel','omnidirectionel','n\'est pas un moyen de communication','bidirectionel'],#singleReponse:false}]},SaROSLaunchExperiment{#order:4,#title:'TurtleSim Services',#id:#TurtleSimServiceExperiment,#state:'A) Cette commande nous affiche la liste des services accessibles pour le turtlesim\r\rB) Le service en B correspond aux différents paramètres que l\'on peut appliqué au tracé de la turtlesim (la couleur du tracé,  la largeur du trait et l\'afichage ou non de celui-ci).\r\rC) Le service en C correspond aux différents paramètres que l\'on peut appliqué pour l\'apparition de la turtlesim (sa pose (x,y,theta) et son nom).\r\rD) Dans le simulateur on observe l\'apparition d\'une 2e turtlesim en x=2, y=2, theta= 0.2 qui ne bouge pas dont le nom est par défaut "turtle2"\r\r',#optional:false,#description:'#Detailles\n\nPrenez note de tout que vous observé et de tout qu\'est demandé pour l\'exercise.\n\nCommentaire: le character "$" est utilisé pour representer la ligne de commande. Normalement, le character ne fait pas partie du commande. \n\nDemarrez le TurtleSim avec le button d\'experiment.\n\n(A)====================================================================\nExecutez la suivante commande:\n```\n$ rosservice list\n```\n\n(B)====================================================================\nExecutez la suivante commande:\n```\n$ rosservice type /turtle1/set_pen | rossrv show\n```\n\nQu\'est-ce que ce le type du service? \n\n(C)====================================================================\nExecutez la suivante commande:\n```\n$ rosservice type /spawn | rossrv show\n```\nQu\'est-ce que ce le type du service? \n\n(D)====================================================================\nExecutez la suivante commande:\n```\n$ rosservice call /spawn 2 2 0.2 ""\n```\n\nQu\'est-ce que ce passé dans le simulateur?\nComment s\'appelle la nouvelle tortue? \n\n\n\n\n\n\n',#played:true,#command:' roslaunch /home/isen1/Boutoille_Maxence_ros/bin/pharo-local/iceberg/pharo-robotics/RobotsDuNordROS/contents/ROSServices/turtlesim.launch '},SaQuestionaire{#order:5,#title:'Quiz #3: Service Experiment',#id:#ServicesExperimentQuiz,#optional:false,#questions:OrderedCollection[SaMultipleChoiceQuestion{#id:#ServicesExperimentQ1,#state:{'retour la definition du type utilise par le service':true,'retour le nom de type utilise par le service':false},#optional:false,#question:'rosservice type',#choices:['retour le nom de type utilise par le service','retour le type du node qui fournis le service','retour la definition du type utilise par le service'],#singleReponse:false},SaMultipleChoiceQuestion{#id:#ServicesExperimentQ2,#state:{'Ajoute une nouvelle tortue dans le simulateur':true},#optional:false,#question:'rosservice call /spawn ...',#choices:['Ajoute N nouvelle tortues dans le simulateur','Ajoute une nouvelle tortue dans le simulateur','Demarre un deuxieme simulateur qui partage l\'ecran avec ce la deja ouvert'],#singleReponse:false},SaMultipleChoiceQuestion{#id:#ServicesExperimentQ3,#state:{'Nettoye tout les lignes dessinées prescedement':true},#optional:false,#question:'rosservice call /clear',#choices:['Redemarre le simulateur','Enleve toutes les tortues du simulateur','Nettoye tout les lignes dessinées prescedement'],#singleReponse:false}]},SaMarkdownContent{#order:6,#title:'Python Service Client',#id:#ServicePSCROS,#content:'# Client du service\nÉcrire le node publisher en python\n\nAddresez vous au dossier catkin_ws/src, ajoute le dossier "scripts", et addresez vous la. \n```\n$ cd ~/catkin_ws/src\n$ mkdir scripts\n$ cd scripts\n```\n\nAjouter une fichier appellé client.py\nDans ce fichier, coller le contenu suivant\n\n```\n #!/usr/bin/env python\n\nfrom __future__ import print_function\n\nimport sys\nimport rospy\nfrom beginner_tutorials.srv import *\n\ndef add_two_ints_client(x, y):\n    rospy.wait_for_service(\'add_two_ints\')\n    try:\n        add_two_ints = rospy.ServiceProxy(\'add_two_ints\', AddTwoInts)\n        resp1 = add_two_ints(x, y)\n        return resp1.sum\n    except rospy.ServiceException as e:\n        print("Service call failed: %s"%e)\n\ndef usage():\n    return "%s [x y]"%sys.argv[0]\n\nif __name__ == "__main__":\n    if len(sys.argv) == 3:\n        x = int(sys.argv[1])\n        y = int(sys.argv[2])\n    else:\n        print(usage())\n        sys.exit(1)\n    print("Requesting %s+%s"%(x, y))\n    print("%s + %s = %s"%(x, y, add_two_ints_client(x, y)))\n\n```\n\nAddresez vous sur le dossier catkin_ws\n\n```\n$ cd ~/catkin_ws\n```\n\n\nOuvrez le fichier CMakeLists.txt\n\n```\ncatkin_install_python(PROGRAMS scripts/client.py\n  DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n)\n```\n\nLissez le code python, discouté avec vos collegues d\'equipe sur chaque ligne. \n\n\n\n\n\n\n'},SaMarkdownContent{#order:7,#title:'Python Service Server',#id:#ServicePSSROS,#content:'# Serveur du service\nÉcrire le node publisher en python\n\nAddresez vous au dossier catkin_ws/src, ajoute le dossier "scripts", et addresez vous la. \n```\n$ cd ~/catkin_ws/src\n$ mkdir scripts\n$ cd scripts\n```\n\nAjouter une fichier appellé serveur.py\nDans ce fichier, coller le contenu suivant\n\n```\n #!/usr/bin/env python\n\nfrom __future__ import print_function\n\nfrom beginner_tutorials.srv import AddTwoInts,AddTwoIntsResponse\nimport rospy\n\ndef handle_add_two_ints(req):\n    print("Returning [%s + %s = %s]"%(req.a, req.b, (req.a + req.b)))\n    return AddTwoIntsResponse(req.a + req.b)\n\ndef add_two_ints_server():\n    rospy.init_node(\'add_two_ints_server\')\n    s = rospy.Service(\'add_two_ints\', AddTwoInts, handle_add_two_ints)\n    print("Ready to add two ints.")\n    rospy.spin()\n\nif __name__ == "__main__":\n    add_two_ints_server()\n```\n\n\nAddresez vous sur le dossier catkin_ws\n\n```\n$ cd ~/catkin_ws\n```\n\n\nOuvrez le fichier CMakeLists.txt\n\n```\ncatkin_install_python(PROGRAMS scripts/client.py scripts/serveur.py\n  DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n)\n```\n\nLissez le code python, discouté avec vos collegues d\'equipe sur chaque ligne. \n\n\n\n\n\n\n'},SaMarkdownContent{#order:8,#title:'Python Service Execution',#id:#ServicePSEROS,#content:'Addresez vous dans vos dossier catkin, et executé make. \n\n```\n$ cd ~/catkin_ws\n$ catkin_make\n```\n\nQu\'est-ce que vous venez de faire? discoutez avec vous collegue d\'equipe. \n\n\nOuvrez trois terminales. \n\nDans la premiere, executez\n\n```\n$ roscore\n```\n\nDans la deuxieme\n\n```\n$ rosrun turtlbot3 serveur.py\n```\n\nDans la troisieme\n\n```\n$ rosrun turtlbot3 client.py\n```\n\nQu\'est-ce que ce passe? discoutez avec vous collegues d\'equipe.\n\n'},SaQuestionaire{#order:9,#title:'Quiz #4: Services et Python',#id:#ServiceCodingQuiz,#optional:false,#questions:OrderedCollection[SaOpenQuestion{#id:#ServicesCodeQ3,#state:'print("Returning [%s + %s = %s]"%(req.a, req.b, (req.a + req.b)))',#optional:false,#question:'Qu\'est-ce que ce la ligne du code serveur que garde l\'information a retourner au client?'},SaOpenQuestion{#id:#ServicesCodeQ2,#state:'La différence d\'execution entre publisher/suscriber  et le service c\'est que publisher envoie en permanence des informations et suscriber les consulte également en permanence alors que les services attendent une réponse pour pouvoir répondre ou afficher l\'information. Ils ne cherchent pas en continue à consulter ce qu\'il se passe.',#optional:false,#question:'Comparez la difference d\'execution entre le publisher et le subscriber de nos exemple precedentes et ce la du services '},SaOpenQuestion{#id:#ServicesCodeQ1,#state:'Asynchrone => on a la notion de listener et de callback qui intervient dans le code car un seul programme ne peut pas à la fois écouter et parler sur le canal\r\rSynchrone => on à la notion de request qui intervient pour savoir si le canal de communication est libre pour parler. Car pour communiquer l\'un doit attendre que l\'autre est fini de parler pour pouvoir  à son tour parler.',#optional:false,#question:'Comparez brefment la difference entre synchrone et asynchrone depuis le point de vu du code'}]},SaLessonSummary{#order:10,#title:'Summary',#id:#__Summary,#content:'#Summaire  \n\n\nvous devez être capable de:\n\t\n\t\n- Reconnaitre qu\'est-ce que ce un Service\n- Pouvoir reconnaitre les services d\'un systeme ROS. \n- Interagir et obtenir information d\'un service existante\n- Comprendre qu\'est-ce que ce un requeter un service. \n- Pouvoir requeter un service depui Ros PY.\n'}],#title:'Services',#current:11,#submitFolder:#RosElementalConcepts,#id:#Services}